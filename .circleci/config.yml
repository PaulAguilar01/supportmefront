version: 2.1

aliases:
  - &filter-only-master
    branches:
      only:
        - master

attach-workspace: &attach-workspace
  attach_workspace:
    at: ~/repo

jobs:
  checkout-install-dependencies:
    working_directory: ~/repo
    machine: true
    steps:
      - checkout
      - run:
          name: Prepare workspace
          command: |
            rm -rf .git
            chmod -R ugo+rwx ~/repo
      - run:
          name: Install dependencies
          command: docker run --rm -w /repo -v $PWD:/repo circleci/node:8.11-stretch sh -c "npm install && chmod -R ugo+rwx ./node_modules"
      - persist_to_workspace:
          root: ~/repo
          paths:
            - .
  security-scan:
    working_directory: ~/repo
    machine: true
    steps:
      - *attach-workspace
      - run:
          name: Security Scan with Hawkeye
          command: docker run --rm --name="hawkeye" -v $PWD:/target stono/hawkeye

  unit-test:
    working_directory: ~/repo
    parallelism: 3
    docker:
      - image: circleci/node:8.11-stretch
    steps:
      - *attach-workspace
      - run:
          name: Running unit tests
          command: |
            npm rebuild node-sass npm run run-tests

  deploy-staging:
    working_directory: ~/repo
    machine: true
    steps:
<<<<<<< HEAD
<<<<<<< HEAD
      - checkout
      - run:
          name: Deploy frontend to staging
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME_STAGING.git master

  deploy-production:
    working_directory: ~/repo
    machine: true
    steps:
      - checkout
      - run:
          name: Deploy frontend to production
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master

workflows:
  version: 2.1
  build-and-test:
    jobs:
      - checkout-install-dependencies
      - security-scan:
          requires:
            - checkout-install-dependencies
      - unit-test:
          requires:
            - checkout-install-dependencies
      - deploy-staging:
          requires:
            - unit-test
            - security-scan
      - approve-deploy-to-production:
          type: approval
          requires:
            - deploy-staging
          filters: *filter-only-master
      - deploy-production:
          requires:
            - approve-deploy-to-production
